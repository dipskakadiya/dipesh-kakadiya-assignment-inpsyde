{"version":3,"file":"user-list-block/editor.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAC4D;AACa;AACpC;AACA;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASM,aAAa,CAACC,KAAK,EAAE;EAC3C,MAAM;IAAEC,UAAU;IAAEC;EAAc,CAAC,GAAGF,KAAK;EAC3C,MAAM;IAAEG;EAAM,CAAC,GAAGF,UAAU;EAE5B,OACE,kEAAC,sEAAiB,QAChB,kEAAC,4DAAS;IAAC,KAAK,EAAEJ,mDAAE,CAAC,SAAS,EAAEC,mDAAmB;EAAE,GACnD,kEAAC,2DAAQ,QACP,kEAAC,8DAAW;IACV,KAAK,EAAED,mDAAE,CAAC,OAAO,EAAEC,mDAAmB,CAAE;IACxC,IAAI,EAAED,mDAAE,CAAC,uBAAuB,EAAEC,mDAAmB,CAAE;IACvD,KAAK,EAAEK,KAAM;IACb,QAAQ,EAAEE,KAAK,IAAI;MACjBH,aAAa,CAAC;QAAEC,KAAK,EAAEE;MAAM,CAAC,CAAC;IACjC;EAAE,EACF,CACO,CACD,CACM;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACwD;AACP;AACY;AACxB;;AAErC;AACA;AACA;AACkD;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASI,IAAI,CAACT,KAAK,EAAE;EAClC,MAAM;IAAEC;EAAW,CAAC,GAAGD,KAAK;EAE5B,MAAMU,UAAU,GAAGJ,sEAAa,CAAC;IAC/BK,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,OACE,kIACE,kEAAC,4DAAa,EAAKX,KAAK,CAAI,EAC5B,yEAASU,UAAU,EACjB,kEAAC,2DAAQ,QACP,kEAAC,sEAAgB;IACf,KAAK,EAAEZ,6CAAc;IACrB,UAAU,EAAE;MAAE,GAAGG;IAAW;EAAE,EAC9B,CACO,CACP,CACL;AAEP;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASY,IAAI,GAAG;EAC7B,OAAO,IAAI;AACb;;;;;;;;;;;ACVA;;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACsD;;AAEtD;AACA;AACA;AACoC;AACP;AACA;AAEN;AAEvBC,oEAAiB,CAAChB,6CAAa,EAAE;EAC/BiB,IAAI,EAAEN,gDAAI;EACVO,IAAI,EAAEH,gDAAIA;AACZ,CAAC,CAAC,C","sources":["webpack://@inpsyde/json-rest-api-integration/./blocks/user-list-block/js/edit-settings-panel.js","webpack://@inpsyde/json-rest-api-integration/./blocks/user-list-block/js/edit.js","webpack://@inpsyde/json-rest-api-integration/./blocks/user-list-block/js/save.js","webpack://@inpsyde/json-rest-api-integration/./blocks/user-list-block/editor.scss?5796","webpack://@inpsyde/json-rest-api-integration/external window [\"wp\",\"blockEditor\"]","webpack://@inpsyde/json-rest-api-integration/external window [\"wp\",\"blocks\"]","webpack://@inpsyde/json-rest-api-integration/external window [\"wp\",\"components\"]","webpack://@inpsyde/json-rest-api-integration/external window [\"wp\",\"element\"]","webpack://@inpsyde/json-rest-api-integration/external window [\"wp\",\"i18n\"]","webpack://@inpsyde/json-rest-api-integration/external window [\"wp\",\"serverSideRender\"]","webpack://@inpsyde/json-rest-api-integration/webpack/bootstrap","webpack://@inpsyde/json-rest-api-integration/webpack/runtime/compat get default export","webpack://@inpsyde/json-rest-api-integration/webpack/runtime/define property getters","webpack://@inpsyde/json-rest-api-integration/webpack/runtime/hasOwnProperty shorthand","webpack://@inpsyde/json-rest-api-integration/webpack/runtime/make namespace object","webpack://@inpsyde/json-rest-api-integration/./blocks/user-list-block/editor.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { InspectorControls } from \"@wordpress/block-editor\";\nimport { PanelBody, PanelRow, TextControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport metadata from \"../block.json\";\n\n/**\n * The SettingsPane contains a panel with block's settings.\n * It needs block's attributes to be proxied make use of\n * attributes property and setAttributes setter.\n *\n * @param {Object} props Block properties\n * @return {WPElement} Element to render.\n */\nexport default function SettingsPanel(props) {\n  const { attributes, setAttributes } = props;\n  const { title } = attributes;\n\n  return (\n    <InspectorControls>\n      <PanelBody title={__(\"General\", metadata.textdomain)}>\n        <PanelRow>\n          <TextControl\n            label={__(\"Name:\", metadata.textdomain)}\n            help={__(\"Enter Name for block.\", metadata.textdomain)}\n            value={title}\n            onChange={value => {\n              setAttributes({ title: value });\n            }}\n          />\n        </PanelRow>\n      </PanelBody>\n    </InspectorControls>\n  );\n}\n","/**\n * WordPress dependencies\n */\nimport { useBlockProps } from \"@wordpress/block-editor\";\nimport { Disabled } from \"@wordpress/components\";\nimport ServerSideRender from \"@wordpress/server-side-render\";\nimport metadata from \"../block.json\";\n\n/**\n * Internal dependencies\n */\nimport SettingsPanel from \"./edit-settings-panel\";\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n * @param {Object} props Block properties\n * @return {WPElement} Element to render.\n */\nexport default function Edit(props) {\n  const { attributes } = props;\n\n  const blockProps = useBlockProps({\n    className: \"\"\n  });\n\n  return (\n    <>\n      <SettingsPanel {...props} />\n      <div {...blockProps}>\n        <Disabled>\n          <ServerSideRender\n            block={metadata.name}\n            attributes={{ ...attributes }}\n          />\n        </Disabled>\n      </div>\n    </>\n  );\n}\n","/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n * @return {WPElement} Element to render.\n */\nexport default function Save() {\n  return null;\n}\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * WordPress dependencies\n */\nimport { registerBlockType } from \"@wordpress/blocks\";\n\n/**\n * Internal dependencies\n */\nimport metadata from \"./block.json\";\nimport Edit from \"./js/edit\";\nimport Save from \"./js/save\";\n\nimport \"./editor.scss\";\n\nregisterBlockType(metadata.name, {\n  edit: Edit,\n  save: Save\n});\n"],"names":["InspectorControls","PanelBody","PanelRow","TextControl","__","metadata","SettingsPanel","props","attributes","setAttributes","title","textdomain","value","useBlockProps","Disabled","ServerSideRender","Edit","blockProps","className","name","Save","registerBlockType","edit","save"],"sourceRoot":""}